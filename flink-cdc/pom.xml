<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>flink-learning-from-zhisheng</artifactId>
        <groupId>com.shangbaishuyao.flink</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>flink-cdc</artifactId>

    <dependencies>
        <!--写Flink 流式代码所必须的-->
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-java</artifactId>
            <version>1.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-streaming-java_2.12</artifactId>
            <version>1.12.0</version>
        </dependency>

        <!--Flink 客户端包,因为要运行-->
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-clients_2.12</artifactId>
            <version>1.12.0</version>
        </dependency>

        <!--需要将CheckPoint保存到HDFS,这是对HDFS的依赖-->
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-client</artifactId>
            <version>3.1.3</version>
        </dependency>

        <!--mysql连接器,驱动-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.49</version>
        </dependency>

        <!--flink-cdc 对mysql的依赖-->
        <dependency>
            <groupId>com.alibaba.ververica</groupId>
            <artifactId>flink-connector-mysql-cdc</artifactId>
            <version>1.2.0</version>
        </dependency>

        <!--自定义反序列化器的时候,自己封装json对象使用-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.75</version>
        </dependency>

        <!--flink sql依赖-->
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-table-planner-blink_2.12</artifactId>
            <version>1.12.0</version>
        </dependency>
    </dependencies>
    <!--https://cloud.tencent.com/developer/article/1622207-->
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.1.1</version>
                <configuration>
                    <!-- put your configurations here -->
                    <!--只包含该项目代码中用到的jar,在父项目中引入了，但在当前模块中没有用到就会被删掉-->
                    <minimizeJar>true</minimizeJar>
                    <!--重新定位类位置，就好像类是自己写的一样，修改别人jar包的package-->
                    <relocations>
                        <relocation>
                            <pattern>com.alibaba.fastjson</pattern>
                            <shadedPattern>com.gavinzh.learn.fastjson</shadedPattern>
                            <excludes>
                                <!--这些类和包不会被改变-->
                                <exclude>com.alibaba.fastjson.not.Exists</exclude>
                                <exclude>com.alibaba.fastjson.not.exists.*</exclude>
                            </excludes>
                        </relocation>
                    </relocations>
                </configuration>
                <executions>
                    <execution>
                        <configuration>
                            <!--创建一个你自己的标识符，位置在原有名称之后-->
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>gavinzh</shadedClassifierName>
                            <!--在打包过程中对文件做一些处理工作-->
                            <transformers>
                                <!--在META-INF/MANIFEST.MF文件中添加key: value 可以设置Main方法-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <mainClass>com.gavinzh.learn.shade.Main</mainClass>
                                        <Build-Number>123</Build-Number>
                                        <Built-By>your name</Built-By>
                                        <X-Compile-Source-JDK>1.7</X-Compile-Source-JDK>
                                        <X-Compile-Target-JDK>1.7</X-Compile-Target-JDK>
                                    </manifestEntries>
                                </transformer>
                                <!--阻止META-INF/LICENSE和META-INF/LICENSE.txt-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer"/>
                                <!--合并所有notice文件-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ApacheNoticeResourceTransformer">
                                    <addHeader>true</addHeader>
                                </transformer>
                                <!--如果多个jar包在META-INF文件夹下含有相同的文件，那么需要将他们合并到一个文件里-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.handlers</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.schemas</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.factories</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.tld</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring-form.tld</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.tooling</resource>
                                </transformer>
                                <!--如果多个jar包在META-INF文件夹下含有相同的xml文件，则需要聚合他们-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ComponentsXmlResourceTransformer"/>
                                <!--排除掉指定资源文件-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">
                                    <resource>.no_need</resource>
                                </transformer>
                                <!--将项目下的文件file额外加到resource中-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                                    <resource>META-INF/pom_test</resource>
                                    <file>pom.xml</file>
                                </transformer>
                                <!--整合spi服务中META-INF/services/文件夹的相关配置-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                            </transformers>
                        </configuration>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>